// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  fullName         String
  email            String            @unique
  password         String
  role             String?           @default("user")
  contactNo        String
  address          String
  profileImg       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]
  feedBacks        FeedBack[]
  blogs            Blog[]
  addToCarts       AddToCart[]

  @@map("users")
}

model Service {
  id               String            @id @default(uuid())
  title            String
  description      String
  price            Float
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  image            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]
  addToCarts       AddToCart[]
  feedBacks        FeedBack[]

  @@map("services")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@map("review_and_ratings")
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  status    String?  @default("pending")
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model FeedBack {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])
  comments   String
  suggestion String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("feed-back")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  thumbnail String
  published Boolean? @default(true)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model AddToCart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("add-to-cart")
}

model Category {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]

  @@map("categories")
}
